<snippet>
	<content><![CDATA[
string construct_longest_common_subsequence(const string &S, const string &T) {
    int n = int(S.size());
    int m = int(T.size());
    vector<int> dp(m + 1, 0);
    vector<vector<bool>> previous(n + 1, vector<bool>(m + 1, false));

    for (int i = 0; i < n; i++) {
        vector<int> next_dp(m + 1, 0);

        for (int j = 0; j < m; j++)
            if (S[i] == T[j]) {
                next_dp[j + 1] = dp[j] + 1;
            } else {
                next_dp[j + 1] = max(dp[j + 1], next_dp[j]);
                previous[i + 1][j + 1] = next_dp[j + 1] == next_dp[j];
            }

        swap(dp, next_dp);
    }

    int a = n, b = m;
    string common;

    while (a > 0 && b > 0) {
        if (S[a - 1] == T[b - 1]) {
            common += S[a - 1];
            a--; b--;
            continue;
        }

        if (previous[a][b])
            b--;
        else
            a--;
    }

    reverse(common.begin(), common.end());
    return common;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>construct_lcs</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
